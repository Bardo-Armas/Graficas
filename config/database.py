# Importaciones del sistema operativo y manejo de variables de entorno
import os
from dotenv import load_dotenv  # Para cargar variables de entorno desde archivo .env
from sqlalchemy import create_engine, text  # ORM para manejo de base de datos
from urllib.parse import quote_plus  # Para escapar caracteres especiales en URLs

# Cargar variables de entorno desde el archivo .env
# Esto permite mantener credenciales sensibles fuera del c√≥digo fuente
load_dotenv()

class DatabaseConfig:
    """
    Clase de configuraci√≥n para la conexi√≥n a la base de datos SQL Server.
    
    Esta clase maneja la conexi√≥n a SQL Server utilizando m√∫ltiples drivers
    con un sistema de fallback autom√°tico. Primero intenta usar pyodbc (m√°s robusto)
    y si falla, utiliza pymssql (m√°s ligero) como alternativa.
    
    Caracter√≠sticas principales:
    - Carga autom√°tica de credenciales desde variables de entorno
    - Sistema de fallback entre drivers (pyodbc -> pymssql)
    - Pool de conexiones configurado para optimizar rendimiento
    - Validaci√≥n autom√°tica de conexi√≥n
    """
    
    def __init__(self):
        """
        Inicializa la configuraci√≥n de base de datos cargando las credenciales
        desde las variables de entorno definidas en el archivo .env
        """
        # Servidor de base de datos (ej: localhost, 192.168.1.100, servidor.dominio.com)
        self.server = os.getenv('DB_SERVER')
        
        # Nombre de la base de datos espec√≠fica a conectar
        self.database = os.getenv('DB_DATABASE')
        
        # Usuario para autenticaci√≥n en SQL Server
        self.username = os.getenv('DB_USERNAME')
        
        # Contrase√±a del usuario (se maneja de forma segura)
        self.password = os.getenv('DB_PASSWORD')
        
        # Driver preferido por defecto (pymssql es m√°s ligero y compatible)
        self.driver = os.getenv('DB_DRIVER', 'pymssql')
    
    def _try_pyodbc_connection(self):
        """
        Intenta establecer conexi√≥n usando el driver pyodbc.
        
        pyodbc es m√°s robusto y soporta m√°s caracter√≠sticas avanzadas de SQL Server,
        pero requiere drivers ODBC instalados en el sistema operativo.
        
        Returns:
            sqlalchemy.Engine: Motor de base de datos configurado o None si falla
        """
        try:
            # Importar pyodbc din√°micamente para evitar errores si no est√° instalado
            import pyodbc
            
            # Obtener lista de drivers ODBC disponibles en el sistema
            drivers = pyodbc.drivers()
            print(f"üîç Drivers ODBC disponibles: {drivers}")
            
            # Buscar drivers compatibles con SQL Server en orden de preferencia
            # FreeTDS: Driver open-source multiplataforma
            # ODBC Driver 17: Driver oficial de Microsoft m√°s reciente
            # SQL Server: Driver legacy pero ampliamente compatible
            available_driver = None
            for driver in ['FreeTDS', 'ODBC Driver 17 for SQL Server', 'SQL Server']:
                if driver in drivers:
                    available_driver = driver
                    break
            
            # Si no hay drivers compatibles, no se puede usar pyodbc
            if not available_driver:
                print("‚ö†Ô∏è No se encontraron drivers ODBC compatibles")
                return None
            
            print(f"‚úÖ Usando driver ODBC: {available_driver}")
            
            # Escapar caracteres especiales en la contrase√±a para evitar errores de parsing
            escaped_password = quote_plus(self.password)
            
            # Construir string de conexi√≥n para pyodbc
            # TDS_Version=8.0 especifica la versi√≥n del protocolo Tabular Data Stream
            connection_string = (
                f"mssql+pyodbc://{self.username}:{escaped_password}@{self.server}/"
                f"{self.database}?driver={available_driver}&TDS_Version=8.0"
            )
            
            # Crear motor SQLAlchemy con configuraci√≥n optimizada
            engine = create_engine(
                connection_string,
                pool_pre_ping=True,    # Verifica conexiones antes de usarlas
                pool_recycle=1800,     # Recicla conexiones cada 30 minutos
                pool_size=3,           # Mantiene 3 conexiones activas en el pool
                max_overflow=5,        # Permite hasta 5 conexiones adicionales temporales
                echo=False             # No muestra SQL queries en consola (para producci√≥n)
            )
            
            return engine
            
        except ImportError:
            # pyodbc no est√° instalado en el sistema
            print("‚ö†Ô∏è pyodbc no disponible")
            return None
        except Exception as e:
            # Error durante la configuraci√≥n o conexi√≥n con pyodbc
            print(f"‚ö†Ô∏è Error con pyodbc: {e}")
            return None
    
    def _try_pymssql_connection(self):
        """
        Intenta establecer conexi√≥n usando el driver pymssql.
        
        pymssql es m√°s ligero y f√°cil de instalar, pero con menos caracter√≠sticas
        avanzadas. Es ideal como fallback cuando pyodbc no est√° disponible.
        
        Returns:
            sqlalchemy.Engine: Motor de base de datos configurado o None si falla
        """
        try:
            # Importar pymssql din√°micamente
            import pymssql
            print("‚úÖ Usando pymssql como driver")
            
            # Escapar caracteres especiales en la contrase√±a
            escaped_password = quote_plus(self.password)
            
            # Construir string de conexi√≥n para pymssql (m√°s simple que pyodbc)
            connection_string = (
                f"mssql+pymssql://{self.username}:{escaped_password}@{self.server}/"
                f"{self.database}"
            )
            
            # Crear motor SQLAlchemy con la misma configuraci√≥n de pool
            engine = create_engine(
                connection_string,
                pool_pre_ping=True,    # Verifica conexiones antes de usarlas
                pool_recycle=1800,     # Recicla conexiones cada 30 minutos
                pool_size=3,           # Mantiene 3 conexiones activas en el pool
                max_overflow=5,        # Permite hasta 5 conexiones adicionales temporales
                echo=False             # No muestra SQL queries en consola
            )
            
            return engine
            
        except ImportError:
            # pymssql no est√° instalado en el sistema
            print("‚ö†Ô∏è pymssql no disponible")
            return None
        except Exception as e:
            # Error durante la configuraci√≥n o conexi√≥n con pymssql
            print(f"‚ö†Ô∏è Error con pymssql: {e}")
            return None
    
    def get_engine(self):
        """
        M√©todo principal para obtener un motor de base de datos configurado.
        
        Implementa un sistema de fallback autom√°tico:
        1. Valida que todas las credenciales est√©n disponibles
        2. Intenta conexi√≥n con pyodbc (preferido)
        3. Si falla, intenta con pymssql (fallback)
        4. Valida la conexi√≥n con una query de prueba
        
        Returns:
            sqlalchemy.Engine: Motor de base de datos listo para usar
            
        Raises:
            ValueError: Si faltan variables de entorno requeridas
            Exception: Si no se puede establecer conexi√≥n con ning√∫n driver
        """
        
        # ==========================================
        # VALIDACI√ìN DE CREDENCIALES
        # ==========================================
        
        # Verificar que todas las credenciales necesarias est√©n disponibles
        if not all([self.server, self.database, self.username, self.password]):
            # Identificar espec√≠ficamente qu√© variables faltan para facilitar debugging
            missing = []
            if not self.server: missing.append('DB_SERVER')
            if not self.database: missing.append('DB_DATABASE')
            if not self.username: missing.append('DB_USERNAME')
            if not self.password: missing.append('DB_PASSWORD')
            raise ValueError(f"Faltan variables de entorno: {', '.join(missing)}")
        
        # ==========================================
        # SISTEMA DE FALLBACK ENTRE DRIVERS
        # ==========================================
        
        # Primer intento: pyodbc (driver preferido por su robustez)
        engine = self._try_pyodbc_connection()
        
        # Segundo intento: pymssql (fallback m√°s ligero)
        if engine is None:
            print("üîÑ Intentando con pymssql...")
            engine = self._try_pymssql_connection()
        
        # Si ambos drivers fallan, la conexi√≥n es imposible
        if engine is None:
            raise Exception("‚ùå No se pudo establecer conexi√≥n con ning√∫n driver disponible")
        
        # ==========================================
        # VALIDACI√ìN DE CONEXI√ìN
        # ==========================================
        
        # Probar la conexi√≥n ejecutando una query simple
        try:
            print("üîÑ Probando conexi√≥n a la base de datos...")
            
            # Ejecutar query de prueba para verificar conectividad
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1 as test"))
                row = result.fetchone()
                print(f"‚úÖ Conexi√≥n exitosa! Resultado: {row}")
            
            # Retornar el motor configurado y validado
            return engine
            
        except Exception as e:
            # La conexi√≥n fall√≥ durante la validaci√≥n
            print(f"‚ùå Error de conexi√≥n: {str(e)}")
            raise