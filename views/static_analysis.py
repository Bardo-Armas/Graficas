"""
Vista de An√°lisis Est√°tico (Semanal)
====================================

Este m√≥dulo contiene la clase StaticAnalysisView que maneja el an√°lisis estad√≠stico
semanal de la aplicaci√≥n. Proporciona an√°lisis detallados de pedidos y cr√©ditos
organizados por semanas del a√±o con visualizaciones y m√©tricas comparativas.

Caracter√≠sticas principales:
- An√°lisis semanal de pedidos y cr√©ditos por a√±o
- Selector de a√±o para an√°lisis hist√≥rico
- Gr√°ficos de barras con datos semanales
- M√©tricas de semanas con mayor/menor actividad
- C√°lculo de cr√©ditos por pedido y an√°lisis de costos
- Descarga de datos en formato CSV
- Manejo robusto de errores y validaci√≥n de datos
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from data.database_service import DatabaseService
from data.data_processor import DataProcessor
from utils.chart_utils import ChartUtils
from utils.error_handler import handle_errors, validate_date_range
from utils.date_utils import DateUtils
from config.settings import AppSettings

class StaticAnalysisView:
    """
    Vista para an√°lisis estad√≠stico semanal (est√°tico).
    
    Esta clase maneja la renderizaci√≥n del an√°lisis semanal que incluye:
    - An√°lisis de pedidos por semana del a√±o
    - An√°lisis de cr√©ditos por semana con c√°lculo de costos
    - Selector de a√±o para an√°lisis hist√≥rico
    - M√©tricas comparativas entre semanas
    - Visualizaciones de barras con datos semanales
    - Funcionalidad de descarga de datos
    
    Attributes:
        db_service (DatabaseService): Servicio para acceso a datos
        data_processor (DataProcessor): Procesador de datos estad√≠sticos
        chart_utils (ChartUtils): Utilidades para creaci√≥n de gr√°ficos
        date_utils (DateUtils): Utilidades para manejo de fechas
    """
    
    def __init__(self):
        """
        Inicializar la vista de an√°lisis est√°tico.
        
        Configura todos los servicios necesarios para el an√°lisis semanal,
        incluyendo acceso a datos, procesamiento y utilidades de visualizaci√≥n.
        """
        self.db_service = DatabaseService()
        self.data_processor = DataProcessor()
        self.chart_utils = ChartUtils()
        self.date_utils = DateUtils()
    
    @handle_errors
    def render(self):
        """
        Renderizar la vista completa del an√°lisis est√°tico semanal.
        
        M√©todo principal que coordina la renderizaci√≥n del an√°lisis semanal,
        incluyendo selector de a√±o y pesta√±as para pedidos y cr√©ditos.
        """
        st.title("üìä Estad√≠sticas Semanales")
        
        # Configurar selector de a√±o en sidebar
        current_year = datetime.now().year
        years_available = list(range(2025, current_year + 3))
        selected_year = st.sidebar.selectbox(
            "Seleccionar A√±o", 
            years_available, 
            index=years_available.index(current_year)
        )
        
        # Configurar fechas basadas en el a√±o seleccionado
        fecha_inicio_sem = datetime(selected_year, 1, 1).date()
        fecha_actual = (datetime.now().date() if selected_year == current_year 
                       else datetime(selected_year, 12, 31).date())
        
        # Renderizar pesta√±as de an√°lisis
        self._render_tabs(fecha_inicio_sem, fecha_actual, selected_year)
    
    def _render_tabs(self, fecha_inicio_sem, fecha_actual, selected_year):
        """
        Renderizar pesta√±as del an√°lisis est√°tico.
        
        Crea las dos pesta√±as principales del an√°lisis semanal:
        1. Pedidos por Semana - An√°lisis de volumen de pedidos
        2. Cr√©ditos por Semana - An√°lisis de costos y cr√©ditos utilizados
        
        Args:
            fecha_inicio_sem (date): Fecha de inicio del a√±o
            fecha_actual (date): Fecha actual o fin del a√±o
            selected_year (int): A√±o seleccionado para an√°lisis
        """
        tab1, tab2 = st.tabs(["üì¶ Pedidos por Semana", "üí≥ Cr√©ditos por Semana"])
        
        with tab1:
            self._render_weekly_orders_tab(fecha_inicio_sem, fecha_actual, selected_year)
        
        with tab2:
            self._render_weekly_credits_tab(fecha_inicio_sem, fecha_actual, selected_year)
    
    def _render_weekly_orders_tab(self, fecha_inicio_sem, fecha_actual, selected_year):
        """
        Renderizar pesta√±a de an√°lisis de pedidos semanales.
        
        Muestra el an√°lisis completo de pedidos organizados por semanas,
        incluyendo m√©tricas principales, gr√°fico de barras y tabla de datos.
        
        Args:
            fecha_inicio_sem (date): Fecha de inicio del per√≠odo
            fecha_actual (date): Fecha actual del per√≠odo
            selected_year (int): A√±o seleccionado para an√°lisis
        """
        with st.spinner("Obteniendo datos de pedidos..."):
            datos_estadistica_pedidos = self.db_service.get_orders_data(fecha_inicio_sem, fecha_actual)
            
            if datos_estadistica_pedidos and datos_estadistica_pedidos.get("success"):
                # Procesar datos semanales de pedidos
                pedidos_semanales = self.data_processor.calculate_weekly_data(
                    datos_estadistica_pedidos, "pedidos", selected_year
                )
            else:
                st.error("No se pudieron obtener datos de pedidos")
                pedidos_semanales = None
        
        if pedidos_semanales is not None and not pedidos_semanales.empty:
            st.header(f"An√°lisis Semanal de Pedidos {selected_year}")
            
            # M√©tricas principales del an√°lisis de pedidos
            col1, col2, col3 = st.columns(3)
            total = pedidos_semanales["pedidos_totales"].sum()
            semana_max = pedidos_semanales.loc[pedidos_semanales["pedidos_totales"].idxmax()]
            semana_min = pedidos_semanales.loc[pedidos_semanales["pedidos_totales"].idxmin()]
            
            col1.metric("Pedidos totales", f"{total:,}")
            col2.metric(
                "Semana con m√°s pedidos", 
                f"Semana {semana_max['semana']}", 
                help=f"{semana_max['rango_fechas']}: {semana_max['pedidos_totales']:,}"
            )
            col3.metric(
                "Semana con menos pedidos", 
                f"Semana {semana_min['semana']}", 
                help=f"{semana_min['rango_fechas']}: {semana_min['pedidos_totales']:,}"
            )
            
            # Gr√°fico de barras con escala de colores
            fig = px.bar(
                pedidos_semanales, 
                x="semana", 
                y="pedidos_totales", 
                title="Pedidos por Semana", 
                labels={"semana": "Semana", "pedidos_totales": "Total Pedidos"}, 
                hover_data=["rango_fechas"], 
                color="pedidos_totales", 
                color_continuous_scale="reds"
            )
            fig.update_traces(
                hovertemplate="<b>Semana %{x}</b><br>%{customdata[0]}<br>Pedidos: %{y:,}", 
                texttemplate="%{y:,}", 
                textposition="outside"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Tabla de datos con formato de fechas
            pedidos_semanales_display = pedidos_semanales.copy()
            if 'fecha_inicio' in pedidos_semanales_display.columns:
                pedidos_semanales_display["fecha_inicio"] = pedidos_semanales_display["fecha_inicio"].astype('datetime64[ns]').dt.strftime('%d-%m-%Y')
            if 'fecha_fin' in pedidos_semanales_display.columns:
                pedidos_semanales_display["fecha_fin"] = pedidos_semanales_display["fecha_fin"].astype('datetime64[ns]').dt.strftime('%d-%m-%Y')
            
            st.dataframe(
                pedidos_semanales_display[["semana", "rango_fechas", "pedidos_totales"]].rename(
                    columns={"semana": "Semana", "rango_fechas": "Rango", "pedidos_totales": "Pedidos"}
                ), 
                hide_index=True
            )
            
            # Funcionalidad de descarga de datos
            csv = pedidos_semanales.to_csv(index=False).encode("utf-8")
            st.download_button(
                "üìä Descargar Datos", 
                data=csv, 
                file_name=f"pedidos_semanales_{fecha_inicio_sem.strftime('%d-%m-%Y')}_{fecha_actual.strftime('%d-%m-%Y')}.csv", 
                mime="text/csv"
            )
        else:
            st.warning("No hay datos de pedidos disponibles")
    
    def _render_weekly_credits_tab(self, fecha_inicio_sem, fecha_actual, selected_year):
        """
        Renderizar pesta√±a de an√°lisis de cr√©ditos semanales.
        
        Muestra el an√°lisis completo de cr√©ditos organizados por semanas,
        incluyendo c√°lculo de cr√©ditos por pedido, m√©tricas de costos y
        an√°lisis de semanas m√°s costosas.
        
        Args:
            fecha_inicio_sem (date): Fecha de inicio del per√≠odo
            fecha_actual (date): Fecha actual del per√≠odo
            selected_year (int): A√±o seleccionado para an√°lisis
        """
        with st.spinner("Obteniendo datos de cr√©ditos y pedidos..."):
            data_creditos_pedidos = self.db_service.get_orders_data(fecha_inicio_sem, fecha_actual)
            
            if data_creditos_pedidos is not None and data_creditos_pedidos.get("success"):
                try:
                    # Validar estructura de datos recibidos
                    df_estadistica = pd.DataFrame(data_creditos_pedidos["data"]["detalle"]["general"]["todos"])
                    
                    # Verificar existencia de columna cr√≠tica
                    if "order_completion_date" not in df_estadistica.columns:
                        st.warning("‚ö†Ô∏è No hay datos en las fechas seleccionadas. Por lo tanto no se puede procesar el an√°lisis de cr√©ditos.")
                        return
                    
                    # Verificar datos v√°lidos en la columna
                    if df_estadistica["order_completion_date"].isna().all():
                        st.warning("‚ö†Ô∏è No hay fechas de completado v√°lidas en los datos. No se puede procesar el an√°lisis de cr√©ditos.")
                        return
                    
                    # Limpiar datos eliminando registros sin fecha
                    df_estadistica = df_estadistica.dropna(subset=["order_completion_date"])
                    
                    if df_estadistica.empty:
                        st.warning("‚ö†Ô∏è No hay datos v√°lidos despu√©s de filtrar por fechas de completado. Intenta con un rango de fechas diferente.")
                        return
                    
                except Exception as e:
                    st.error(f"‚ö†Ô∏è Error al procesar los datos: Los datos recibidos no tienen el formato esperado. Por favor, verifica la conexi√≥n con la base de datos.")
                    return
                
                if not df_estadistica.empty:
                    try:
                        # Procesar datos semanales de cr√©ditos y pedidos
                        creditos_semanales = self.data_processor.calculate_weekly_data(
                            data_creditos_pedidos, "creditos", selected_year
                        )
                        pedidos_semanales_for_credits = self.data_processor.calculate_weekly_data(
                            data_creditos_pedidos, "pedidos", selected_year
                        )
                        
                        if (not creditos_semanales.empty and 
                            not pedidos_semanales_for_credits.empty):
                            
                            # Combinar datos de cr√©ditos y pedidos
                            df_combinado = creditos_semanales.merge(
                                pedidos_semanales_for_credits[["semana", "pedidos_totales"]],
                                on="semana",
                                how="left"
                            )
                            
                            # Calcular cr√©ditos por pedido (costo promedio)
                            df_combinado["creditos_por_pedido"] = (
                                df_combinado["creditos_totales"] / 
                                df_combinado["pedidos_totales"].replace(0, np.nan)
                            )
                            df_combinado = df_combinado.dropna(subset=["creditos_por_pedido"])
                            
                            # Identificar semana m√°s costosa
                            if not df_combinado.empty:
                                semana_mas_costosa = df_combinado.loc[
                                    df_combinado["creditos_por_pedido"].idxmax()
                                ]
                            else:
                                semana_mas_costosa = None
                        else:
                            st.warning("‚ö†Ô∏è No se pudieron calcular los datos semanales. Verifica que haya suficientes datos en el per√≠odo seleccionado.")
                            df_combinado = None
                    except Exception as e:
                        st.error(f"‚ö†Ô∏è Error al calcular datos semanales: No se pudieron procesar los datos correctamente.")
                        df_combinado = None
                else:
                    st.warning("‚ö†Ô∏è No hay datos de estad√≠sticas disponibles para procesar cr√©ditos y pedidos.")
                    df_combinado = None
            else:
                st.warning("‚ö†Ô∏è No se pudieron obtener datos de la API. Verifica la conexi√≥n con la base de datos.")
                df_combinado = None
        
        if df_combinado is not None and not df_combinado.empty:
            st.header(f"An√°lisis Semanal de Cr√©ditos {selected_year}")
            
            # M√©tricas principales del an√°lisis de cr√©ditos
            col1, col2, col3, col4 = st.columns(4)
            total = df_combinado["creditos_totales"].sum()
            semana_max = df_combinado.loc[df_combinado["creditos_totales"].idxmax()]
            semana_min = df_combinado.loc[df_combinado["creditos_totales"].idxmin()]
            
            col1.metric("Cr√©ditos totales", f"{total:,}")
            col2.metric(
                "Semana con m√°s cr√©ditos", 
                f"Semana {semana_max['semana']}",
                help=f"{semana_max['rango_fechas']}: {semana_max['creditos_totales']:,}"
            )
            col3.metric(
                "Semana con menos cr√©ditos", 
                f"Semana {semana_min['semana']}",
                help=f"{semana_min['rango_fechas']}: {semana_min['creditos_totales']:,}"
            )
            
            # M√©trica de semana m√°s costosa por pedido
            if semana_mas_costosa is not None:
                col4.metric(
                    "Semana con env√≠o m√°s costoso", 
                    f"Semana {semana_mas_costosa['semana']}",
                    help=f"{semana_mas_costosa['rango_fechas']}: ${semana_mas_costosa['creditos_por_pedido']:,.2f} por pedido"
                )
            else:
                col4.metric("Semana con env√≠o m√°s costoso", "N/A")
            
            # Gr√°fico de barras con escala de colores turbo
            fig = px.bar(
                df_combinado, 
                x="semana", 
                y="creditos_totales",
                title="Cr√©ditos por Semana",
                labels={"semana": "Semana", "creditos_totales": "Total Cr√©ditos"},
                hover_data=["rango_fechas", "pedidos_totales", "creditos_por_pedido"],
                color="creditos_totales",
                color_continuous_scale="turbo"
            )
            fig.update_traces(
                hovertemplate="<b>Semana %{x}</b><br>%{customdata[0]}<br>Cr√©ditos: %{y:,}<br>Pedidos: %{customdata[1]:,}<br>Cr√©ditos/Pedido: $%{customdata[2]:.2f}",
                texttemplate="%{y:,}",
                textposition="outside"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Tabla de datos detallados con todas las m√©tricas
            st.subheader("Datos Semanales Detallados")
            df_combinado_display = df_combinado.copy()
            
            # Formatear fechas para visualizaci√≥n
            if 'fecha_inicio' in df_combinado_display.columns:
                df_combinado_display["fecha_inicio"] = df_combinado_display["fecha_inicio"].astype('datetime64[ns]').dt.strftime('%d-%m-%Y')
            if 'fecha_fin' in df_combinado_display.columns:
                df_combinado_display["fecha_fin"] = df_combinado_display["fecha_fin"].astype('datetime64[ns]').dt.strftime('%d-%m-%Y')
            
            # Tabla interactiva con formato de moneda
            st.dataframe(
                df_combinado_display[["semana", "rango_fechas", "pedidos_totales", "creditos_totales", "creditos_por_pedido"]].rename(
                    columns={
                        "semana": "Semana",
                        "rango_fechas": "Rango",
                        "pedidos_totales": "Pedidos",
                        "creditos_totales": "Cr√©ditos",
                        "creditos_por_pedido": "Cr√©ditos/Pedido"
                    }
                ).sort_values("Semana"),
                hide_index=True,
                column_config={
                    "Cr√©ditos/Pedido": st.column_config.NumberColumn(format="$%.2f")
                }
            )
            
            # Funcionalidad de descarga de datos completos
            csv = df_combinado.to_csv(index=False).encode("utf-8")
            st.download_button(
                "üìä Descargar Datos Completos",
                data=csv,
                file_name=f"creditos_pedidos_semanales_{fecha_inicio_sem.strftime('%d-%m-%Y')}_{fecha_actual.strftime('%d-%m-%Y')}.csv",
                mime="text/csv"
            )
        else:
            st.info("üìä No hay datos suficientes para mostrar el an√°lisis de cr√©ditos en el per√≠odo seleccionado. Intenta con un rango de fechas diferente o verifica que haya pedidos completados en este per√≠odo.")


# Funci√≥n de compatibilidad para mantener la funci√≥n original
def otros_dashboard():
    """
    Funci√≥n de compatibilidad para mantener la interfaz original.
    
    Esta funci√≥n mantiene la compatibilidad con c√≥digo existente que
    pueda estar llamando a la funci√≥n otros_dashboard() directamente.
    Simplemente crea una instancia de StaticAnalysisView y llama a render().
    """
    view = StaticAnalysisView()
    view.render()


